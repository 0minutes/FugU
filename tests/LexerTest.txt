/*
THIS IS NOT THE FUTURE SYNTAX, I JUST COPPIED AND PASTED SOME RANDOM CODE TO MAKE SURE THE LEXER WORKS WELL
*/

mut x = 10; // Assign an integer to x
mut y = 20.5; // Assign a float to y

const greeting = "Hello, Lexer!"; // Assign a string
const initial = 'L'; // Assign a character
// Control structures
if (x < y && y > 0) {
    x += 1;
    y -= 2;
} else if (x > y || y < 0) {
    x++;
    y--;
} else {
    x = y;
};

while (x <= 50 || y >= 10) {
    x *= 2;
    y /= 3;
}


for (mut i = 0; i < 10; i++) {
    print(i);
};

const result = proc add(a, b) {
    return a + b;
};  

mut z = add(x, y);

x != y;  // Not equal comparison
z == 42;  // Equality comparison

// Logical and bitwise operators
mut condition = true || false && !true;
mut bitwise = ~x & y | z ^ 42;
mut shifted = x << 2 >> 1;

// Type checking and other operations
mut isNumber = typeof x == "number";
mut empty = null;

// Include and new keyword usage
include "module";
mut obj = new class {
    constructor() {
        this.name = "Object";
    }
};
print("Finished lexer test!");

// Nested control structures
for (mut j = 0; j < 5; j++) {
    if (j % 2 == 0) {
        while (j < 3) {
            j++;
        }
    }
}

const finalValue = input("Enter a value: ");
